name: Release

on:
  schedule:
    # Check for new Gluetun releases every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      gluetun_version:
        description: 'Gluetun version to build (e.g., v3.45.0)'
        required: false
        default: ''

jobs:
  check-gluetun-releases:
    runs-on: ubuntu-latest
    outputs:
      latest-version: ${{ steps.check-releases.outputs.latest-version }}
      should-release: ${{ steps.check-releases.outputs.should-release }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Check for new Gluetun releases
      id: check-releases
      run: |
        # Get the latest Gluetun release
        LATEST_GLUETUN=$(curl -s https://api.github.com/repos/qdm12/gluetun/releases/latest | jq -r '.tag_name')
        echo "Latest Gluetun version: $LATEST_GLUETUN"
        
        # Get the latest version we've built (from git tags)
        LATEST_BUILT=$(git tag --sort=-version:refname | grep '^v[0-9]' | head -n1 || echo "v0.0.0")
        echo "Latest built version: $LATEST_BUILT"
        
        # Extract version numbers for comparison
        GLUETUN_VERSION=$(echo $LATEST_GLUETUN | sed 's/v//')
        BUILT_VERSION=$(echo $LATEST_BUILT | sed 's/v//')
        
        echo "Gluetun version: $GLUETUN_VERSION"
        echo "Built version: $BUILT_VERSION"
        
        # Check if we need to build a new version
        if [ "$GLUETUN_VERSION" != "$BUILT_VERSION" ]; then
          echo "should-release=true" >> $GITHUB_OUTPUT
          echo "latest-version=$LATEST_GLUETUN" >> $GITHUB_OUTPUT
          echo "New Gluetun version detected: $LATEST_GLUETUN"
        else
          echo "should-release=false" >> $GITHUB_OUTPUT
          echo "latest-version=$LATEST_GLUETUN" >> $GITHUB_OUTPUT
          echo "No new Gluetun version found"
        fi

  build-and-release:
    needs: check-gluetun-releases
    if: needs.check-gluetun-releases.outputs.should-release == 'true' || github.event.inputs.gluetun_version != ''
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event.inputs.gluetun_version }}" != "" ]; then
          VERSION="${{ github.event.inputs.gluetun_version }}"
        else
          VERSION="${{ needs.check-gluetun-releases.outputs.latest-version }}"
        fi
        
        # Extract version number without 'v' prefix
        VERSION_NUM=$(echo $VERSION | sed 's/v//')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_num=$VERSION_NUM" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"
        
    - name: Update Dockerfile with Gluetun version
      run: |
        VERSION="${{ steps.version.outputs.version_num }}"
        sed -i "s/ARG GLUETUN_VERSION=.*/ARG GLUETUN_VERSION=$VERSION/" Dockerfile.local
        
    - name: Build and push Docker image
      run: |
        VERSION="${{ steps.version.outputs.version_num }}"
        
        # Build for multiple architectures
        docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6 \
          -t ghcr.io/m2sh/ha-addon-glutun:$VERSION \
          -t ghcr.io/m2sh/ha-addon-glutun:latest \
          --push .
        
    - name: Create Git tag
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        VERSION_NUM="${{ steps.version.outputs.version_num }}"
        
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Create tag
        git tag -a $VERSION -m "Release $VERSION - Gluetun $VERSION_NUM"
        git push origin $VERSION
        
    - name: Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: |
          ## Changes
          
          - Updated to Gluetun ${{ steps.version.outputs.version_num }}
          
          ## Docker Image
          
          ```bash
          docker pull ghcr.io/m2sh/ha-addon-glutun:${{ steps.version.outputs.version_num }}
          ```
          
          ## Installation
          
          Add this repository to your Home Assistant addons:
          ```
          https://github.com/m2sh/ha-addon-glutun
          ```
        draft: false
        prerelease: false 